version: "3"

services:
  ai:
    build:
      context: ./AI
      dockerfile: Dockerfile
    ports:
      - "5001:5001"
    networks:
      - app-tier

  backend: &python
    container_name: backend
    build:
      context: ./backend
    links:
      - redis:rd
      - rabbitmq:rb
      - ai:ai
    ports:
      - 8000:8000
    volumes:
      - ./backend/:/backend/
    expose:
      - 8000
    networks:
      - app-tier
    depends_on:
      - redis
      - rabbitmq
      - celery

  celery:
    <<: *python
    container_name: celery
    command: "celery -A flower worker --loglevel=INFO"
    ports: []
    depends_on:
      - rabbitmq

  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    volumes:
      - ./frontend/:/frontend
      - build_folder:/frontend/dist
      - ./frontend/node_modules/:/frontend/node_modules
    tty: true

  nginx:
    container_name: nginx
    restart: unless-stopped
    build:
      context: ./nginx
    ports:
      - 80:80
      - 443:443
    volumes:
      - build_folder:/var/www/frontend
      - ./nginx/certbot/conf:/etc/letsencrypt
      - ./nginx/certbot/www:/var/www/certbot
    depends_on:
      - frontend
      - backend
    networks:
      - app-tier  
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  redis:
    image: redis
    ports:
      - "6379:6379"
    networks:
      - app-tier

  rabbitmq:
    image: rabbitmq
    ports:
      - "5672:5672"
    networks:
      - app-tier

  certbot:
    container_name: certbot
    image: certbot/certbot:amd64-v1.20.0
    restart: unless-stopped
    volumes:
      - ./nginx/certbot/conf:/etc/letsencrypt
      - ./nginx/certbot/www:/var/www/certbot
    depends_on:
      - nginx   
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

networks:
  app-tier:
    driver: bridge

volumes:
  build_folder: null
